
// line 1 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
package clojurewerkz.crawlista.robots;


import java.text.ParseException;

import clojure.lang.*;;



// line 187 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"


public class Parser {
  
// line 18 "src/java/clojurewerkz/crawlista/robots/Parser.java"
private static byte[] init__robots_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    2,    1,    3,    2,    1,    5,    2,
	    1,    7,    2,    2,    3,    2,    3,    1,    2,    3,    2,    2,
	    3,    5,    2,    3,    7,    2,    4,    5,    2,    5,    1,    2,
	    5,    3,    2,    5,    4,    2,    5,    7,    2,    6,    7,    2,
	    7,    1,    2,    7,    3,    2,    7,    5,    2,    7,    6,    3,
	    1,    2,    3,    3,    1,    4,    5,    3,    1,    6,    7,    3,
	    2,    3,    5,    3,    2,    3,    7,    3,    3,    4,    5,    3,
	    3,    6,    7,    3,    4,    5,    7,    3,    5,    2,    3,    3,
	    5,    6,    7,    3,    7,    2,    3,    3,    7,    4,    5
	};
}

private static final byte _robots_actions[] = init__robots_actions_0();


private static short[] init__robots_key_offsets_0()
{
	return new short [] {
	    0,    0,   12,   17,   18,   20,   22,   24,   26,   27,   38,   57,
	   63,   75,   80,   82,   84,   86,   88,   89,  100,  119,  125,  126,
	  133,  141,  149,  157,  165,  172,  180,  188,  196,  204,  212,  220,
	  228,  235,  246,  257,  276,  282,  289,  297,  305,  313,  321,  328,
	  339,  345,  352,  360,  368,  376,  384,  392,  400,  408,  415,  423,
	  431,  439,  447,  455,  463,  470,  481,  492,  511,  517,  524,  532,
	  540,  548,  556,  563,  574,  580,  587,  595,  603,  611,  619,  627,
	  635,  643,  650,  661,  667,  674,  682,  690,  698,  706,  714,  722,
	  729,  737,  745,  753,  760,  768,  776,  784,  792,  800,  807,  823,
	  831,  834,  837,  854,  859,  864,  869,  874,  878,  889,  895,  900,
	  905,  910,  915,  920,  925,  930,  934,  945,  951,  956,  961,  966,
	  971,  976,  981,  985,  996, 1002, 1007, 1012, 1017, 1021, 1026, 1031,
	 1036, 1041, 1046, 1050, 1061, 1070, 1076, 1084, 1092, 1100, 1107, 1115,
	 1123, 1131, 1139, 1147, 1154, 1170, 1176, 1184, 1192, 1200, 1208, 1216,
	 1224, 1231, 1242, 1250, 1258, 1266, 1273, 1281, 1289, 1297, 1305, 1313,
	 1320, 1336, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1357, 1359,
	 1361, 1363, 1365, 1367, 1369, 1370, 1372, 1374, 1376, 1377, 1379, 1381,
	 1383, 1385, 1387, 1388, 1393, 1405, 1407, 1409, 1411, 1413, 1415, 1417,
	 1419, 1420, 1431, 1450, 1456, 1457, 1464, 1469, 1477, 1485, 1493, 1501,
	 1508, 1519, 1526, 1527, 1538, 1544, 1551, 1559, 1567, 1575, 1583, 1591,
	 1599, 1607, 1614, 1625, 1632, 1643, 1651, 1659, 1667, 1675, 1683, 1691,
	 1698, 1709, 1716, 1727, 1733, 1740, 1748, 1756, 1764, 1771, 1779, 1787,
	 1795, 1803, 1811, 1818, 1834, 1843, 1849, 1855, 1858, 1865, 1867, 1869,
	 1871, 1873, 1875, 1877, 1878, 1889, 1908, 1914, 1921, 1929, 1937, 1945,
	 1953, 1960, 1971, 1977, 1984, 1992, 2000, 2008, 2016, 2024, 2032, 2040,
	 2047, 2058, 2064, 2071, 2079, 2087, 2095, 2103, 2111, 2119, 2126, 2137,
	 2145, 2153, 2161, 2168, 2176, 2184, 2192, 2200, 2208, 2215, 2231, 2237,
	 2243, 2250, 2251, 2256, 2263, 2271, 2279, 2287, 2295, 2302, 2313, 2321,
	 2329, 2337, 2345, 2353, 2361, 2369, 2376, 2387, 2393, 2400, 2408, 2416,
	 2424, 2432, 2440, 2448, 2455, 2466, 2472, 2479, 2487, 2495, 2503, 2510,
	 2518, 2526, 2534, 2542, 2550, 2557, 2573, 2579, 2585, 2592, 2604, 2623,
	 2635, 2647, 2666, 2685, 2704, 2721, 2733, 2752, 2771, 2790, 2809, 2826,
	 2838
	};
}

private static final short _robots_key_offsets[] = init__robots_key_offsets_0();


private static char[] init__robots_trans_keys_0()
{
	return new char [] {
	   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,    9,   13,
	   10,   13,  127,    0,   31,   10,   76,  108,   76,  108,   79,  111,
	   87,  119,   58,   10,   13,   32,   35,  127,    0,    8,    9,   12,
	   14,   31,   10,   13,   32,   35,   65,   68,   83,   85,   97,  100,
	  115,  117,  127,    0,    8,    9,   12,   14,   31,   10,   13,   35,
	  127,    0,   32,   32,   35,   65,   68,   83,   85,   97,  100,  115,
	  117,    9,   13,   10,   13,  127,    0,   31,   76,  108,   76,  108,
	   79,  111,   87,  119,   58,   10,   13,   32,   35,  127,    0,    8,
	    9,   12,   14,   31,   10,   13,   32,   35,   65,   68,   83,   85,
	   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,  127,    0,   32,   10,   10,   13,   32,   35,  127,    0,
	   31,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   79,  111,  127,    0,
	   32,   10,   13,   35,   87,  119,  127,    0,   32,   10,   13,   35,
	   58,  127,    0,   32,   10,   13,   35,   73,  105,  127,    0,   32,
	   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,
	   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   79,
	  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   32,   35,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   32,   35,   65,   68,   83,
	   85,   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,   31,
	   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,
	   31,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   79,  111,  127,    0,
	   32,   10,   13,   35,   87,  119,  127,    0,   32,   10,   13,   35,
	   58,  127,    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,
	   35,  127,    0,   31,   10,   13,   35,   73,  105,  127,    0,   32,
	   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,
	   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   79,
	  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   35,   73,  105,
	  127,    0,   32,   10,   13,   35,   84,  116,  127,    0,   32,   10,
	   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   77,  109,
	  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,
	   13,   35,   80,  112,  127,    0,   32,   10,   13,   35,   58,  127,
	    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,
	   31,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,
	   10,   13,   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,
	  127,    0,    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,
	   32,   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,   76,
	  108,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,
	   10,   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,   87,
	  119,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,
	   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,
	   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,   31,   10,
	   13,   35,   73,  105,  127,    0,   32,   10,   13,   35,   83,  115,
	  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,
	   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   76,  108,
	  127,    0,   32,   10,   13,   35,   79,  111,  127,    0,   32,   10,
	   13,   35,   87,  119,  127,    0,   32,   10,   13,   35,   58,  127,
	    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,
	   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,   31,   10,   13,   35,   73,  105,  127,    0,   32,   10,   13,
	   35,   84,  116,  127,    0,   32,   10,   13,   35,   69,  101,  127,
	    0,   32,   10,   13,   35,   77,  109,  127,    0,   32,   10,   13,
	   35,   65,   97,  127,    0,   32,   10,   13,   35,   80,  112,  127,
	    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   35,
	   83,  115,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,
	   32,   10,   13,   35,   82,  114,  127,    0,   32,   10,   13,   35,
	   45,  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,
	   10,   13,   35,   71,  103,  127,    0,   32,   10,   13,   35,   69,
	  101,  127,    0,   32,   10,   13,   35,   78,  110,  127,    0,   32,
	   10,   13,   35,   84,  116,  127,    0,   32,   10,   13,   35,   58,
	  127,    0,   32,   10,   13,   32,   35,   42,  127,    0,    8,    9,
	   12,   14,   31,   65,   90,   97,  122,   32,   42,    9,   13,   65,
	   90,   97,  122,   10,   13,   35,   10,   13,   35,   32,   35,   42,
	   65,   68,   83,   85,   97,  100,  115,  117,    9,   13,   66,   90,
	   98,  122,   10,   13,   35,   76,  108,   10,   13,   35,   76,  108,
	   10,   13,   35,   79,  111,   10,   13,   35,   87,  119,   10,   13,
	   35,   58,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,
	   31,   10,   13,   35,  127,    0,   32,   10,   13,   35,   73,  105,
	   10,   13,   35,   83,  115,   10,   13,   35,   65,   97,   10,   13,
	   35,   76,  108,   10,   13,   35,   76,  108,   10,   13,   35,   79,
	  111,   10,   13,   35,   87,  119,   10,   13,   35,   58,   10,   13,
	   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,   35,
	  127,    0,   32,   10,   13,   35,   73,  105,   10,   13,   35,   84,
	  116,   10,   13,   35,   69,  101,   10,   13,   35,   77,  109,   10,
	   13,   35,   65,   97,   10,   13,   35,   80,  112,   10,   13,   35,
	   58,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,
	   10,   13,   35,  127,    0,   32,   10,   13,   35,   83,  115,   10,
	   13,   35,   69,  101,   10,   13,   35,   82,  114,   10,   13,   35,
	   45,   10,   13,   35,   65,   97,   10,   13,   35,   71,  103,   10,
	   13,   35,   69,  101,   10,   13,   35,   78,  110,   10,   13,   35,
	   84,  116,   10,   13,   35,   58,   10,   13,   32,   35,   42,    9,
	   12,   65,   90,   97,  122,   10,   32,   42,    9,   13,   65,   90,
	   97,  122,   10,   13,   35,  127,    0,   32,   10,   13,   35,   83,
	  115,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,
	   10,   13,   35,   82,  114,  127,    0,   32,   10,   13,   35,   45,
	  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,
	   13,   35,   71,  103,  127,    0,   32,   10,   13,   35,   69,  101,
	  127,    0,   32,   10,   13,   35,   78,  110,  127,    0,   32,   10,
	   13,   35,   84,  116,  127,    0,   32,   10,   13,   35,   58,  127,
	    0,   32,   10,   13,   32,   35,   42,  127,    0,    8,    9,   12,
	   14,   31,   65,   90,   97,  122,   10,   13,   35,  127,    0,   32,
	   10,   13,   35,   73,  105,  127,    0,   32,   10,   13,   35,   84,
	  116,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,
	   10,   13,   35,   77,  109,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   80,  112,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   35,   83,  115,  127,
	    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,   13,
	   35,   82,  114,  127,    0,   32,   10,   13,   35,   45,  127,    0,
	   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,   13,   35,
	   71,  103,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,
	   32,   10,   13,   35,   78,  110,  127,    0,   32,   10,   13,   35,
	   84,  116,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,
	   10,   13,   32,   35,   42,  127,    0,    8,    9,   12,   14,   31,
	   65,   90,   97,  122,   10,   13,   35,  127,    0,   32,   73,  105,
	   83,  115,   65,   97,   76,  108,   76,  108,   79,  111,   87,  119,
	   58,   73,  105,   84,  116,   69,  101,   77,  109,   65,   97,   80,
	  112,   58,   83,  115,   69,  101,   82,  114,   45,   65,   97,   71,
	  103,   69,  101,   78,  110,   84,  116,   58,   10,   13,  127,    0,
	   31,   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,    9,
	   13,   73,  105,   83,  115,   65,   97,   76,  108,   76,  108,   79,
	  111,   87,  119,   58,   10,   13,   32,   35,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   32,   35,   65,   68,   83,   85,   97,
	  100,  115,  117,  127,    0,    8,    9,   12,   14,   31,   10,   13,
	   35,  127,    0,   32,   10,   10,   13,   32,   35,  127,    0,   31,
	   10,   13,  127,    0,   31,   10,   13,   35,   76,  108,  127,    0,
	   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,
	   79,  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,
	   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,
	  127,    0,    8,    9,   12,   14,   31,   10,   13,   32,   35,  127,
	    0,   31,   10,   10,   13,   32,   35,  127,    0,    8,    9,   12,
	   14,   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,
	  127,    0,   31,   10,   13,   35,   73,  105,  127,    0,   32,   10,
	   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,   65,   97,
	  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,
	   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   79,  111,
	  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,   32,   10,
	   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   32,   35,  127,    0,   31,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,   73,  105,  127,    0,   32,   10,   13,   35,   84,  116,
	  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,
	   13,   35,   77,  109,  127,    0,   32,   10,   13,   35,   65,   97,
	  127,    0,   32,   10,   13,   35,   80,  112,  127,    0,   32,   10,
	   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   32,   35,  127,    0,   31,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,   31,
	   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,   69,
	  101,  127,    0,   32,   10,   13,   35,   82,  114,  127,    0,   32,
	   10,   13,   35,   45,  127,    0,   32,   10,   13,   35,   65,   97,
	  127,    0,   32,   10,   13,   35,   71,  103,  127,    0,   32,   10,
	   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   78,  110,
	  127,    0,   32,   10,   13,   35,   84,  116,  127,    0,   32,   10,
	   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,   42,  127,
	    0,    8,    9,   12,   14,   31,   65,   90,   97,  122,   10,   32,
	   42,    9,   13,   65,   90,   97,  122,   10,   13,   35,  127,    0,
	   32,   10,   13,   35,  127,    0,   32,   10,   13,   35,   10,   13,
	   32,   35,  127,    0,   31,   73,  105,   84,  116,   69,  101,   77,
	  109,   65,   97,   80,  112,   58,   10,   13,   32,   35,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   32,   35,   65,   68,   83,
	   85,   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,   31,
	   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,
	   31,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   79,  111,  127,    0,
	   32,   10,   13,   35,   87,  119,  127,    0,   32,   10,   13,   35,
	   58,  127,    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,
	   35,  127,    0,   31,   10,   13,   35,   73,  105,  127,    0,   32,
	   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,
	   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   79,
	  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,   73,  105,
	  127,    0,   32,   10,   13,   35,   84,  116,  127,    0,   32,   10,
	   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   77,  109,
	  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,
	   13,   35,   80,  112,  127,    0,   32,   10,   13,   35,   58,  127,
	    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,
	   31,   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,   35,
	   69,  101,  127,    0,   32,   10,   13,   35,   82,  114,  127,    0,
	   32,   10,   13,   35,   45,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   71,  103,  127,    0,   32,
	   10,   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   78,
	  110,  127,    0,   32,   10,   13,   35,   84,  116,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,   42,
	  127,    0,    8,    9,   12,   14,   31,   65,   90,   97,  122,   10,
	   13,   35,  127,    0,   32,   10,   13,   35,  127,    0,   32,   10,
	   13,   32,   35,  127,    0,   31,   10,   10,   13,  127,    0,   31,
	   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,   76,  108,
	  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,
	   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,   87,  119,
	  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,
	   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,   35,
	   73,  105,  127,    0,   32,   10,   13,   35,   83,  115,  127,    0,
	   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,
	   32,   10,   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,
	   87,  119,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,   31,
	   10,   13,   35,   73,  105,  127,    0,   32,   10,   13,   35,   84,
	  116,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,
	   10,   13,   35,   77,  109,  127,    0,   32,   10,   13,   35,   65,
	   97,  127,    0,   32,   10,   13,   35,   80,  112,  127,    0,   32,
	   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,   83,  115,
	  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,
	   13,   35,   82,  114,  127,    0,   32,   10,   13,   35,   45,  127,
	    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,   13,
	   35,   71,  103,  127,    0,   32,   10,   13,   35,   69,  101,  127,
	    0,   32,   10,   13,   35,   78,  110,  127,    0,   32,   10,   13,
	   35,   84,  116,  127,    0,   32,   10,   13,   35,   58,  127,    0,
	   32,   10,   13,   32,   35,   42,  127,    0,    8,    9,   12,   14,
	   31,   65,   90,   97,  122,   10,   13,   35,  127,    0,   32,   10,
	   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,    0,   31,
	   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,    9,   13,
	   10,   13,   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,
	  127,    0,    8,    9,   12,   14,   31,   32,   35,   65,   68,   83,
	   85,   97,  100,  115,  117,    9,   13,   32,   35,   65,   68,   83,
	   85,   97,  100,  115,  117,    9,   13,   10,   13,   32,   35,   65,
	   68,   83,   85,   97,  100,  115,  117,  127,    0,    8,    9,   12,
	   14,   31,   10,   13,   32,   35,   65,   68,   83,   85,   97,  100,
	  115,  117,  127,    0,    8,    9,   12,   14,   31,   10,   13,   32,
	   35,   65,   68,   83,   85,   97,  100,  115,  117,  127,    0,    8,
	    9,   12,   14,   31,   32,   35,   42,   65,   68,   83,   85,   97,
	  100,  115,  117,    9,   13,   66,   90,   98,  122,   32,   35,   65,
	   68,   83,   85,   97,  100,  115,  117,    9,   13,   10,   13,   32,
	   35,   65,   68,   83,   85,   97,  100,  115,  117,  127,    0,    8,
	    9,   12,   14,   31,   10,   13,   32,   35,   65,   68,   83,   85,
	   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   32,   35,   65,   68,   83,   85,   97,  100,  115,  117,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   32,   35,   65,   68,
	   83,   85,   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,
	   31,   32,   35,   42,   65,   68,   83,   85,   97,  100,  115,  117,
	    9,   13,   66,   90,   98,  122,   32,   35,   65,   68,   83,   85,
	   97,  100,  115,  117,    9,   13,   10,   13,   32,   35,   65,   68,
	   83,   85,   97,  100,  115,  117,  127,    0,    8,    9,   12,   14,
	   31,    0
	};
}

private static final char _robots_trans_keys[] = init__robots_trans_keys_0();


private static byte[] init__robots_single_lengths_0()
{
	return new byte [] {
	    0,   10,    3,    1,    2,    2,    2,    2,    1,    5,   13,    4,
	   10,    3,    2,    2,    2,    2,    1,    5,   13,    4,    1,    5,
	    6,    6,    6,    6,    5,    6,    6,    6,    6,    6,    6,    6,
	    5,    5,    5,   13,    4,    5,    6,    6,    6,    6,    5,    5,
	    4,    5,    6,    6,    6,    6,    6,    6,    6,    5,    6,    6,
	    6,    6,    6,    6,    5,    5,    5,   13,    4,    5,    6,    6,
	    6,    6,    5,    5,    4,    5,    6,    6,    6,    6,    6,    6,
	    6,    5,    5,    4,    5,    6,    6,    6,    6,    6,    6,    5,
	    6,    6,    6,    5,    6,    6,    6,    6,    6,    5,    6,    2,
	    3,    3,   11,    5,    5,    5,    5,    4,    5,    4,    5,    5,
	    5,    5,    5,    5,    5,    4,    5,    4,    5,    5,    5,    5,
	    5,    5,    4,    5,    4,    5,    5,    5,    4,    5,    5,    5,
	    5,    5,    4,    5,    3,    4,    6,    6,    6,    5,    6,    6,
	    6,    6,    6,    5,    6,    4,    6,    6,    6,    6,    6,    6,
	    5,    5,    6,    6,    6,    5,    6,    6,    6,    6,    6,    5,
	    6,    4,    2,    2,    2,    2,    2,    2,    2,    1,    2,    2,
	    2,    2,    2,    2,    1,    2,    2,    2,    1,    2,    2,    2,
	    2,    2,    1,    3,   10,    2,    2,    2,    2,    2,    2,    2,
	    1,    5,   13,    4,    1,    5,    3,    6,    6,    6,    6,    5,
	    5,    5,    1,    5,    4,    5,    6,    6,    6,    6,    6,    6,
	    6,    5,    5,    5,    5,    6,    6,    6,    6,    6,    6,    5,
	    5,    5,    5,    4,    5,    6,    6,    6,    5,    6,    6,    6,
	    6,    6,    5,    6,    3,    4,    4,    3,    5,    2,    2,    2,
	    2,    2,    2,    1,    5,   13,    4,    5,    6,    6,    6,    6,
	    5,    5,    4,    5,    6,    6,    6,    6,    6,    6,    6,    5,
	    5,    4,    5,    6,    6,    6,    6,    6,    6,    5,    5,    6,
	    6,    6,    5,    6,    6,    6,    6,    6,    5,    6,    4,    4,
	    5,    1,    3,    5,    6,    6,    6,    6,    5,    5,    6,    6,
	    6,    6,    6,    6,    6,    5,    5,    4,    5,    6,    6,    6,
	    6,    6,    6,    5,    5,    4,    5,    6,    6,    6,    5,    6,
	    6,    6,    6,    6,    5,    6,    4,    4,    5,   10,   13,   10,
	   10,   13,   13,   13,   11,   10,   13,   13,   13,   13,   11,   10,
	   13
	};
}

private static final byte _robots_single_lengths[] = init__robots_single_lengths_0();


private static byte[] init__robots_range_lengths_0()
{
	return new byte [] {
	    0,    1,    1,    0,    0,    0,    0,    0,    0,    3,    3,    1,
	    1,    1,    0,    0,    0,    0,    0,    3,    3,    1,    0,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    3,    3,    3,    1,    1,    1,    1,    1,    1,    1,    3,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    3,    3,    3,    1,    1,    1,    1,
	    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,    3,
	    0,    0,    3,    0,    0,    0,    0,    0,    3,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    3,    1,    0,    0,    0,    0,
	    0,    0,    0,    3,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    3,    3,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
	    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    5,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    3,    3,    1,    0,    1,    1,    1,    1,    1,    1,    1,
	    3,    1,    0,    3,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,
	    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    5,    3,    1,    1,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    3,    3,    1,    1,    1,    1,    1,    1,
	    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,    1,    1,
	    1,    0,    1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
	    1,    1,    1,    1,    1,    1,    3,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    5,    1,    1,    1,    1,    3,    1,
	    1,    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,    1,
	    3
	};
}

private static final byte _robots_range_lengths[] = init__robots_range_lengths_0();


private static short[] init__robots_index_offsets_0()
{
	return new short [] {
	    0,    0,   12,   17,   19,   22,   25,   28,   31,   33,   42,   59,
	   65,   77,   82,   85,   88,   91,   94,   96,  105,  122,  128,  130,
	  137,  145,  153,  161,  169,  176,  184,  192,  200,  208,  216,  224,
	  232,  239,  248,  257,  274,  280,  287,  295,  303,  311,  319,  326,
	  335,  341,  348,  356,  364,  372,  380,  388,  396,  404,  411,  419,
	  427,  435,  443,  451,  459,  466,  475,  484,  501,  507,  514,  522,
	  530,  538,  546,  553,  562,  568,  575,  583,  591,  599,  607,  615,
	  623,  631,  638,  647,  653,  660,  668,  676,  684,  692,  700,  708,
	  715,  723,  731,  739,  746,  754,  762,  770,  778,  786,  793,  805,
	  811,  815,  819,  834,  840,  846,  852,  858,  863,  872,  878,  884,
	  890,  896,  902,  908,  914,  920,  925,  934,  940,  946,  952,  958,
	  964,  970,  976,  981,  990,  996, 1002, 1008, 1014, 1019, 1025, 1031,
	 1037, 1043, 1049, 1054, 1063, 1070, 1076, 1084, 1092, 1100, 1107, 1115,
	 1123, 1131, 1139, 1147, 1154, 1166, 1172, 1180, 1188, 1196, 1204, 1212,
	 1220, 1227, 1236, 1244, 1252, 1260, 1267, 1275, 1283, 1291, 1299, 1307,
	 1314, 1326, 1332, 1335, 1338, 1341, 1344, 1347, 1350, 1353, 1355, 1358,
	 1361, 1364, 1367, 1370, 1373, 1375, 1378, 1381, 1384, 1386, 1389, 1392,
	 1395, 1398, 1401, 1403, 1408, 1420, 1423, 1426, 1429, 1432, 1435, 1438,
	 1441, 1443, 1452, 1469, 1475, 1477, 1484, 1489, 1497, 1505, 1513, 1521,
	 1528, 1537, 1544, 1546, 1555, 1561, 1568, 1576, 1584, 1592, 1600, 1608,
	 1616, 1624, 1631, 1640, 1647, 1656, 1664, 1672, 1680, 1688, 1696, 1704,
	 1711, 1720, 1727, 1736, 1742, 1749, 1757, 1765, 1773, 1780, 1788, 1796,
	 1804, 1812, 1820, 1827, 1839, 1846, 1852, 1858, 1862, 1869, 1872, 1875,
	 1878, 1881, 1884, 1887, 1889, 1898, 1915, 1921, 1928, 1936, 1944, 1952,
	 1960, 1967, 1976, 1982, 1989, 1997, 2005, 2013, 2021, 2029, 2037, 2045,
	 2052, 2061, 2067, 2074, 2082, 2090, 2098, 2106, 2114, 2122, 2129, 2138,
	 2146, 2154, 2162, 2169, 2177, 2185, 2193, 2201, 2209, 2216, 2228, 2234,
	 2240, 2247, 2249, 2254, 2261, 2269, 2277, 2285, 2293, 2300, 2309, 2317,
	 2325, 2333, 2341, 2349, 2357, 2365, 2372, 2381, 2387, 2394, 2402, 2410,
	 2418, 2426, 2434, 2442, 2449, 2458, 2464, 2471, 2479, 2487, 2495, 2502,
	 2510, 2518, 2526, 2534, 2542, 2549, 2561, 2567, 2573, 2580, 2592, 2609,
	 2621, 2633, 2650, 2667, 2684, 2699, 2711, 2728, 2745, 2762, 2779, 2794,
	 2806
	};
}

private static final short _robots_index_offsets[] = init__robots_index_offsets_0();


private static short[] init__robots_indicies_0()
{
	return new short [] {
	    0,    2,    3,    4,    5,    6,    3,    4,    5,    6,    0,    1,
	    7,    8,    1,    1,    2,    7,    1,    9,    9,    1,   10,   10,
	    1,   11,   11,    1,   12,   12,    1,   13,    1,   14,   15,   13,
	   17,    1,    1,   13,    1,   16,   14,   19,   18,   17,   20,   21,
	   22,   23,   20,   21,   22,   23,    1,    1,   18,    1,   16,   24,
	   25,   27,    1,    1,   26,   28,   29,   30,   31,   32,    6,   30,
	   31,   32,    6,   28,    1,   33,   34,    1,    1,   29,   35,   35,
	    1,   36,   36,    1,   37,   37,    1,   38,   38,    1,   39,    1,
	   40,   41,   39,   43,    1,    1,   39,    1,   42,   40,   45,   44,
	   43,   46,   47,   48,   49,   46,   47,   48,   49,    1,    1,   44,
	    1,   42,   50,   51,   53,    1,    1,   52,   33,    1,   50,   51,
	   29,   53,    1,    1,   54,   50,   51,   53,   55,   55,    1,    1,
	   52,   50,   51,   53,   56,   56,    1,    1,   52,   50,   51,   53,
	   57,   57,    1,    1,   52,   50,   51,   53,   58,   58,    1,    1,
	   52,   50,   51,   53,   39,    1,    1,   52,   50,   51,   53,   59,
	   59,    1,    1,   52,   50,   51,   53,   60,   60,    1,    1,   52,
	   50,   51,   53,   61,   61,    1,    1,   52,   50,   51,   53,   62,
	   62,    1,    1,   52,   50,   51,   53,   63,   63,    1,    1,   52,
	   50,   51,   53,   64,   64,    1,    1,   52,   50,   51,   53,   65,
	   65,    1,    1,   52,   50,   51,   53,   66,    1,    1,   52,   68,
	   69,   67,   71,    1,    1,   67,    1,   70,   72,   73,   67,   75,
	    1,    1,   67,    1,   74,   72,   77,   76,   75,   78,   79,   80,
	   81,   78,   79,   80,   81,    1,    1,   76,    1,   74,   82,   83,
	   85,    1,    1,   84,   82,   83,   29,   85,    1,    1,   86,   82,
	   83,   85,   87,   87,    1,    1,   84,   82,   83,   85,   88,   88,
	    1,    1,   84,   82,   83,   85,   89,   89,    1,    1,   84,   82,
	   83,   85,   90,   90,    1,    1,   84,   82,   83,   85,   91,    1,
	    1,   84,   92,   93,   39,   95,    1,    1,   39,    1,   94,   96,
	   97,   99,    1,    1,   98,   96,   97,   29,   99,    1,    1,  100,
	   82,   83,   85,  101,  101,    1,    1,   84,   82,   83,   85,  102,
	  102,    1,    1,   84,   82,   83,   85,  103,  103,    1,    1,   84,
	   82,   83,   85,  104,  104,    1,    1,   84,   82,   83,   85,  105,
	  105,    1,    1,   84,   82,   83,   85,  106,  106,    1,    1,   84,
	   82,   83,   85,  107,  107,    1,    1,   84,   82,   83,   85,   67,
	    1,    1,   84,   82,   83,   85,  108,  108,    1,    1,   84,   82,
	   83,   85,  109,  109,    1,    1,   84,   82,   83,   85,  110,  110,
	    1,    1,   84,   82,   83,   85,  111,  111,    1,    1,   84,   82,
	   83,   85,  112,  112,    1,    1,   84,   82,   83,   85,  113,  113,
	    1,    1,   84,   82,   83,   85,  114,    1,    1,   84,  116,  117,
	  115,  119,    1,    1,  115,    1,  118,  120,  121,  115,  123,    1,
	    1,  115,    1,  122,  120,  125,  124,  123,  126,  127,  128,  129,
	  126,  127,  128,  129,    1,    1,  124,    1,  122,  130,  131,  133,
	    1,    1,  132,  130,  131,   29,  133,    1,    1,  134,  130,  131,
	  133,  135,  135,    1,    1,  132,  130,  131,  133,  136,  136,    1,
	    1,  132,  130,  131,  133,  137,  137,    1,    1,  132,  130,  131,
	  133,  138,  138,    1,    1,  132,  130,  131,  133,  139,    1,    1,
	  132,  140,  141,   39,  143,    1,    1,   39,    1,  142,  144,  145,
	  147,    1,    1,  146,  144,  145,   29,  147,    1,    1,  148,  130,
	  131,  133,  149,  149,    1,    1,  132,  130,  131,  133,  150,  150,
	    1,    1,  132,  130,  131,  133,  151,  151,    1,    1,  132,  130,
	  131,  133,  152,  152,    1,    1,  132,  130,  131,  133,  153,  153,
	    1,    1,  132,  130,  131,  133,  154,  154,    1,    1,  132,  130,
	  131,  133,  155,  155,    1,    1,  132,  130,  131,  133,  156,    1,
	    1,  132,  157,  158,   67,  160,    1,    1,   67,    1,  159,  161,
	  162,  164,    1,    1,  163,  161,  162,   29,  164,    1,    1,  165,
	  130,  131,  133,  166,  166,    1,    1,  132,  130,  131,  133,  167,
	  167,    1,    1,  132,  130,  131,  133,  168,  168,    1,    1,  132,
	  130,  131,  133,  169,  169,    1,    1,  132,  130,  131,  133,  170,
	  170,    1,    1,  132,  130,  131,  133,  171,  171,    1,    1,  132,
	  130,  131,  133,  115,    1,    1,  132,  130,  131,  133,  172,  172,
	    1,    1,  132,  130,  131,  133,  173,  173,    1,    1,  132,  130,
	  131,  133,  174,  174,    1,    1,  132,  130,  131,  133,  175,    1,
	    1,  132,  130,  131,  133,  176,  176,    1,    1,  132,  130,  131,
	  133,  177,  177,    1,    1,  132,  130,  131,  133,  178,  178,    1,
	    1,  132,  130,  131,  133,  179,  179,    1,    1,  132,  130,  131,
	  133,  180,  180,    1,    1,  132,  130,  131,  133,  181,    1,    1,
	  132,  183,  184,  182,  133,  185,    1,    1,  182,    1,  186,  186,
	  132,  182,  187,  182,  188,  188,    1,  189,  190,  191,    1,  189,
	  193,  191,  192,  194,   29,  187,  195,  196,  197,  198,  195,  196,
	  197,  198,  194,  188,  188,    1,  189,  193,  191,  199,  199,  192,
	  189,  193,  191,  200,  200,  192,  189,  193,  191,  201,  201,  192,
	  189,  193,  191,  202,  202,  192,  189,  193,  191,  203,  192,  204,
	  205,  203,  207,  192,  192,  203,  192,  206,  208,  209,  211,  192,
	  192,  210,  189,  193,  191,  212,  212,  192,  189,  193,  191,  213,
	  213,  192,  189,  193,  191,  214,  214,  192,  189,  193,  191,  215,
	  215,  192,  189,  193,  191,  216,  216,  192,  189,  193,  191,  217,
	  217,  192,  189,  193,  191,  218,  218,  192,  189,  193,  191,  219,
	  192,  220,  221,  219,  223,  192,  192,  219,  192,  222,  224,  225,
	  227,  192,  192,  226,  189,  193,  191,  228,  228,  192,  189,  193,
	  191,  229,  229,  192,  189,  193,  191,  230,  230,  192,  189,  193,
	  191,  231,  231,  192,  189,  193,  191,  232,  232,  192,  189,  193,
	  191,  233,  233,  192,  189,  193,  191,  234,  192,  235,  236,  234,
	  238,  192,  192,  234,  192,  237,  239,  240,  242,  192,  192,  241,
	  189,  193,  191,  243,  243,  192,  189,  193,  191,  244,  244,  192,
	  189,  193,  191,  245,  245,  192,  189,  193,  191,  246,  192,  189,
	  193,  191,  247,  247,  192,  189,  193,  191,  248,  248,  192,  189,
	  193,  191,  249,  249,  192,  189,  193,  191,  250,  250,  192,  189,
	  193,  191,  251,  251,  192,  189,  193,  191,  252,  192,  253,  254,
	  252,  191,  188,  252,  188,  188,  192,  255,  182,  187,  182,  188,
	  188,    1,  239,  256,  242,    1,    1,  132,   82,   83,   85,  257,
	  257,    1,    1,   84,   82,   83,   85,  258,  258,    1,    1,   84,
	   82,   83,   85,  259,  259,    1,    1,   84,   82,   83,   85,  260,
	    1,    1,   84,   82,   83,   85,  261,  261,    1,    1,   84,   82,
	   83,   85,  262,  262,    1,    1,   84,   82,   83,   85,  263,  263,
	    1,    1,   84,   82,   83,   85,  264,  264,    1,    1,   84,   82,
	   83,   85,  265,  265,    1,    1,   84,   82,   83,   85,  266,    1,
	    1,   84,  267,  268,  182,   85,  269,    1,    1,  182,    1,  270,
	  270,   84,  224,  271,  227,    1,    1,   84,   50,   51,   53,  272,
	  272,    1,    1,   52,   50,   51,   53,  273,  273,    1,    1,   52,
	   50,   51,   53,  274,  274,    1,    1,   52,   50,   51,   53,  275,
	  275,    1,    1,   52,   50,   51,   53,  276,  276,    1,    1,   52,
	   50,   51,   53,  277,  277,    1,    1,   52,   50,   51,   53,  278,
	    1,    1,   52,  279,  280,  115,  282,    1,    1,  115,    1,  281,
	   50,   51,   53,  283,  283,    1,    1,   52,   50,   51,   53,  284,
	  284,    1,    1,   52,   50,   51,   53,  285,  285,    1,    1,   52,
	   50,   51,   53,  286,    1,    1,   52,   50,   51,   53,  287,  287,
	    1,    1,   52,   50,   51,   53,  288,  288,    1,    1,   52,   50,
	   51,   53,  289,  289,    1,    1,   52,   50,   51,   53,  290,  290,
	    1,    1,   52,   50,   51,   53,  291,  291,    1,    1,   52,   50,
	   51,   53,  292,    1,    1,   52,  293,  294,  182,   53,  295,    1,
	    1,  182,    1,  296,  296,   52,  208,  297,  211,    1,    1,   52,
	  298,  298,    1,  299,  299,    1,  300,  300,    1,  301,  301,    1,
	  302,  302,    1,  303,  303,    1,  304,  304,    1,   67,    1,  305,
	  305,    1,  306,  306,    1,  307,  307,    1,  308,  308,    1,  309,
	  309,    1,  310,  310,    1,  115,    1,  311,  311,    1,  312,  312,
	    1,  313,  313,    1,  314,    1,  315,  315,    1,  316,  316,    1,
	  317,  317,    1,  318,  318,    1,  319,  319,    1,  182,    1,  320,
	  321,    1,    1,  322,  323,   29,    3,    4,    5,    6,    3,    4,
	    5,    6,  323,    1,  324,  324,    1,  325,  325,    1,  326,  326,
	    1,  327,  327,    1,  328,  328,    1,  329,  329,    1,  330,  330,
	    1,  331,    1,  332,  333,  331,  335,    1,    1,  331,    1,  334,
	  332,  337,  336,  335,  338,  339,  340,  341,  338,  339,  340,  341,
	    1,    1,  336,    1,  334,  342,  343,  345,    1,    1,  344,  346,
	    1,  342,  343,  347,  345,    1,    1,  348,  346,  349,    1,    1,
	  347,  342,  343,  345,  350,  350,    1,    1,  344,  342,  343,  345,
	  351,  351,    1,    1,  344,  342,  343,  345,  352,  352,    1,    1,
	  344,  342,  343,  345,  353,  353,    1,    1,  344,  342,  343,  345,
	  354,    1,    1,  344,  355,  356,   39,  358,    1,    1,   39,    1,
	  357,  359,  360,  322,  362,    1,    1,  361,  320,    1,  363,   41,
	   39,   43,    1,    1,   39,    1,   42,  364,  365,  367,    1,    1,
	  366,  364,  365,  347,  367,    1,    1,  368,  342,  343,  345,  369,
	  369,    1,    1,  344,  342,  343,  345,  370,  370,    1,    1,  344,
	  342,  343,  345,  371,  371,    1,    1,  344,  342,  343,  345,  372,
	  372,    1,    1,  344,  342,  343,  345,  373,  373,    1,    1,  344,
	  342,  343,  345,  374,  374,    1,    1,  344,  342,  343,  345,  375,
	  375,    1,    1,  344,  342,  343,  345,  376,    1,    1,  344,  377,
	  378,   67,  379,    1,    1,   67,    1,  334,  380,  381,  322,  383,
	    1,    1,  382,  384,   73,   67,   75,    1,    1,   67,    1,   74,
	  342,  343,  345,  385,  385,    1,    1,  344,  342,  343,  345,  386,
	  386,    1,    1,  344,  342,  343,  345,  387,  387,    1,    1,  344,
	  342,  343,  345,  388,  388,    1,    1,  344,  342,  343,  345,  389,
	  389,    1,    1,  344,  342,  343,  345,  390,  390,    1,    1,  344,
	  342,  343,  345,  391,    1,    1,  344,  392,  393,  115,  395,    1,
	    1,  115,    1,  394,  396,  397,  322,  399,    1,    1,  398,  400,
	  121,  115,  123,    1,    1,  115,    1,  122,  401,  402,  404,    1,
	    1,  403,  401,  402,  347,  404,    1,    1,  405,  342,  343,  345,
	  406,  406,    1,    1,  344,  342,  343,  345,  407,  407,    1,    1,
	  344,  342,  343,  345,  408,  408,    1,    1,  344,  342,  343,  345,
	  409,    1,    1,  344,  342,  343,  345,  410,  410,    1,    1,  344,
	  342,  343,  345,  411,  411,    1,    1,  344,  342,  343,  345,  412,
	  412,    1,    1,  344,  342,  343,  345,  413,  413,    1,    1,  344,
	  342,  343,  345,  414,  414,    1,    1,  344,  342,  343,  345,  415,
	    1,    1,  344,  416,  417,  182,  345,  418,    1,    1,  182,    1,
	  419,  419,  344,  420,  182,  187,  182,  188,  188,    1,  421,  422,
	  423,    1,    1,  344,  421,  424,  423,  192,  192,  425,  426,  193,
	  191,  192,  427,  428,  429,  431,    1,    1,  430,  432,  432,    1,
	  433,  433,    1,  434,  434,    1,  435,  435,    1,  436,  436,    1,
	  437,  437,    1,  438,    1,  439,  440,  438,  442,    1,    1,  438,
	    1,  441,  439,  444,  443,  442,  445,  446,  447,  448,  445,  446,
	  447,  448,    1,    1,  443,    1,  441,  449,  450,  452,    1,    1,
	  451,  449,  450,  347,  452,    1,    1,  453,  449,  450,  452,  454,
	  454,    1,    1,  451,  449,  450,  452,  455,  455,    1,    1,  451,
	  449,  450,  452,  456,  456,    1,    1,  451,  449,  450,  452,  457,
	  457,    1,    1,  451,  449,  450,  452,  458,    1,    1,  451,  459,
	  460,   39,  462,    1,    1,   39,    1,  461,  463,  464,  466,    1,
	    1,  465,  463,  464,  347,  466,    1,    1,  467,  449,  450,  452,
	  468,  468,    1,    1,  451,  449,  450,  452,  469,  469,    1,    1,
	  451,  449,  450,  452,  470,  470,    1,    1,  451,  449,  450,  452,
	  471,  471,    1,    1,  451,  449,  450,  452,  472,  472,    1,    1,
	  451,  449,  450,  452,  473,  473,    1,    1,  451,  449,  450,  452,
	  474,  474,    1,    1,  451,  449,  450,  452,  475,    1,    1,  451,
	  476,  477,   67,  479,    1,    1,   67,    1,  478,  480,  481,  483,
	    1,    1,  482,  480,  481,  347,  483,    1,    1,  484,  449,  450,
	  452,  485,  485,    1,    1,  451,  449,  450,  452,  486,  486,    1,
	    1,  451,  449,  450,  452,  487,  487,    1,    1,  451,  449,  450,
	  452,  488,  488,    1,    1,  451,  449,  450,  452,  489,  489,    1,
	    1,  451,  449,  450,  452,  490,  490,    1,    1,  451,  449,  450,
	  452,  491,    1,    1,  451,  492,  493,  115,  494,    1,    1,  115,
	    1,  441,  449,  450,  452,  495,  495,    1,    1,  451,  449,  450,
	  452,  496,  496,    1,    1,  451,  449,  450,  452,  497,  497,    1,
	    1,  451,  449,  450,  452,  498,    1,    1,  451,  449,  450,  452,
	  499,  499,    1,    1,  451,  449,  450,  452,  500,  500,    1,    1,
	  451,  449,  450,  452,  501,  501,    1,    1,  451,  449,  450,  452,
	  502,  502,    1,    1,  451,  449,  450,  452,  503,  503,    1,    1,
	  451,  449,  450,  452,  504,    1,    1,  451,  505,  506,  182,  452,
	  507,    1,    1,  182,    1,  508,  508,  451,  509,  510,  511,    1,
	    1,  451,  509,  512,  511,  192,  192,  513,  514,  515,  429,  517,
	    1,    1,  516,  518,    1,  518,  519,    1,    1,  429,   24,   25,
	  347,   27,    1,    1,  520,   24,   25,   27,  521,  521,    1,    1,
	   26,   24,   25,   27,  522,  522,    1,    1,   26,   24,   25,   27,
	  523,  523,    1,    1,   26,   24,   25,   27,  524,  524,    1,    1,
	   26,   24,   25,   27,  525,    1,    1,   26,  526,  527,   39,  528,
	    1,    1,   39,    1,   16,   24,   25,   27,  529,  529,    1,    1,
	   26,   24,   25,   27,  530,  530,    1,    1,   26,   24,   25,   27,
	  531,  531,    1,    1,   26,   24,   25,   27,  532,  532,    1,    1,
	   26,   24,   25,   27,  533,  533,    1,    1,   26,   24,   25,   27,
	  534,  534,    1,    1,   26,   24,   25,   27,  535,  535,    1,    1,
	   26,   24,   25,   27,  536,    1,    1,   26,  537,  538,   67,  540,
	    1,    1,   67,    1,  539,  541,  542,  544,    1,    1,  543,  541,
	  542,  347,  544,    1,    1,  545,   24,   25,   27,  546,  546,    1,
	    1,   26,   24,   25,   27,  547,  547,    1,    1,   26,   24,   25,
	   27,  548,  548,    1,    1,   26,   24,   25,   27,  549,  549,    1,
	    1,   26,   24,   25,   27,  550,  550,    1,    1,   26,   24,   25,
	   27,  551,  551,    1,    1,   26,   24,   25,   27,  552,    1,    1,
	   26,  553,  554,  115,  556,    1,    1,  115,    1,  555,  557,  558,
	  560,    1,    1,  559,  557,  558,  347,  560,    1,    1,  561,   24,
	   25,   27,  562,  562,    1,    1,   26,   24,   25,   27,  563,  563,
	    1,    1,   26,   24,   25,   27,  564,  564,    1,    1,   26,   24,
	   25,   27,  565,    1,    1,   26,   24,   25,   27,  566,  566,    1,
	    1,   26,   24,   25,   27,  567,  567,    1,    1,   26,   24,   25,
	   27,  568,  568,    1,    1,   26,   24,   25,   27,  569,  569,    1,
	    1,   26,   24,   25,   27,  570,  570,    1,    1,   26,   24,   25,
	   27,  571,    1,    1,   26,  572,  573,  182,   27,  574,    1,    1,
	  182,    1,  575,  575,   26,  576,  577,  578,    1,    1,   26,  576,
	  579,  578,  192,  192,  580,  581,  582,  429,  584,    1,    1,  583,
	    0,    2,    3,    4,    5,    6,    3,    4,    5,    6,    0,    1,
	   14,   19,   18,  585,   20,   21,   22,   23,   20,   21,   22,   23,
	    1,    1,   18,    1,   16,   28,  322,   30,   31,   32,    6,   30,
	   31,   32,    6,   28,    1,   28,   29,   30,   31,   32,    6,   30,
	   31,   32,    6,   28,    1,   40,   45,   44,   43,   46,   47,   48,
	   49,   46,   47,   48,   49,    1,    1,   44,    1,   42,   72,   77,
	   76,   75,   78,   79,   80,   81,   78,   79,   80,   81,    1,    1,
	   76,    1,   74,  120,  125,  124,  123,  126,  127,  128,  129,  126,
	  127,  128,  129,    1,    1,  124,    1,  122,  194,   29,  187,  195,
	  196,  197,  198,  195,  196,  197,  198,  194,  188,  188,    1,  323,
	   29,    3,    4,    5,    6,    3,    4,    5,    6,  323,    1,  332,
	  337,  336,  586,  338,  339,  340,  341,  338,  339,  340,  341,    1,
	    1,  336,    1,  334,   40,   45,   44,  587,   46,   47,   48,   49,
	   46,   47,   48,   49,    1,    1,   44,    1,   42,   72,   77,   76,
	  588,   78,   79,   80,   81,   78,   79,   80,   81,    1,    1,   76,
	    1,   74,  120,  125,  124,  589,  126,  127,  128,  129,  126,  127,
	  128,  129,    1,    1,  124,    1,  122,  194,  322,  187,  195,  196,
	  197,  198,  195,  196,  197,  198,  194,  188,  188,    1,  323,  322,
	    3,    4,    5,    6,    3,    4,    5,    6,  323,    1,  439,  444,
	  443,  590,  445,  446,  447,  448,  445,  446,  447,  448,    1,    1,
	  443,    1,  441,    0
	};
}

private static final short _robots_indicies[] = init__robots_indicies_0();


private static short[] init__robots_trans_targs_0()
{
	return new short [] {
	    1,    0,    2,    4,  209,  273,  197,  369,    3,    5,    6,    7,
	    8,    9,  370,    9,   11,  327,   10,   10,  328,  334,  345,  355,
	  371,  220,   11,  327,   12,   13,   14,  182,  190,  372,   22,   15,
	   16,   17,   18,   19,  373,   19,   21,   23,   20,   20,   24,   29,
	  162,  170,  372,   22,   21,   23,   23,   25,   26,   27,   28,   30,
	   31,   32,   33,   34,   35,   36,   37,   38,  374,   38,   48,   49,
	  374,   38,   40,   41,   39,   39,   42,   50,   58,  150,  372,   22,
	   40,   41,   41,   43,   44,   45,   46,   47,  373,   19,   48,   49,
	  372,   22,   48,   49,   49,   51,   52,   53,   54,   55,   56,   57,
	   59,   60,   61,   62,   63,   64,   65,   66,  375,   66,   87,   88,
	  375,   66,   68,   69,   67,   67,   70,   78,   89,   96,  372,   22,
	   68,   69,   69,   71,   72,   73,   74,   75,  373,   19,   76,   77,
	  372,   22,   76,   77,   77,   79,   80,   81,   82,   83,   84,   85,
	   86,  374,   38,   87,   88,  372,   22,   87,   88,   88,   90,   91,
	   92,   93,   94,   95,   97,   98,   99,  100,  101,  102,  103,  104,
	  105,  106,  107,  376,  148,  149,  136,  108,  109,  372,   22,   13,
	  109,  109,  110,  111,  118,  128,  137,  112,  113,  114,  115,  116,
	  373,  116,  117,   23,  372,  109,  117,   23,  119,  120,  121,  122,
	  123,  124,  125,  126,  374,  126,  127,   41,  372,  109,  127,   41,
	  129,  130,  131,  132,  133,  134,  135,  375,  135,  136,   69,  372,
	  109,  136,   69,  138,  139,  140,  141,  142,  143,  144,  145,  146,
	  147,  376,  147,  376,   22,  151,  152,  153,  154,  155,  156,  157,
	  158,  159,  160,  376,  148,  161,  127,   22,  163,  164,  165,  166,
	  167,  168,  169,  375,   66,   76,   77,  171,  172,  173,  174,  175,
	  176,  177,  178,  179,  180,  376,  148,  181,  117,   22,  183,  184,
	  185,  186,  187,  188,  189,  191,  192,  193,  194,  195,  196,  198,
	  199,  200,  201,  202,  203,  204,  205,  206,  377,  230,  207,  208,
	  210,  211,  212,  213,  214,  215,  216,  217,  378,  217,  219,  221,
	  218,  218,  223,  234,  245,  257,  371,  220,  219,  221,  371,  222,
	  221,  220,  224,  225,  226,  227,  228,  379,  231,  232,  233,  377,
	  230,  229,  229,  379,  371,  220,  232,  233,  233,  235,  236,  237,
	  238,  239,  240,  241,  242,  380,  244,  221,  377,  230,  243,  243,
	  380,  246,  247,  248,  249,  250,  251,  252,  381,  254,  255,  256,
	  377,  230,  253,  253,  381,  371,  220,  255,  256,  256,  258,  259,
	  260,  261,  262,  263,  264,  265,  266,  267,  382,  268,  269,  270,
	  382,  371,  220,  221,  271,  270,  371,  383,  325,  326,  272,  272,
	  274,  275,  276,  277,  278,  279,  280,  384,  280,  282,  283,  281,
	  281,  284,  292,  303,  311,  371,  220,  282,  283,  283,  285,  286,
	  287,  288,  289,  379,  231,  290,  291,  371,  220,  290,  291,  291,
	  293,  294,  295,  296,  297,  298,  299,  300,  380,  244,  301,  302,
	  371,  220,  301,  302,  302,  304,  305,  306,  307,  308,  309,  310,
	  381,  254,  283,  312,  313,  314,  315,  316,  317,  318,  319,  320,
	  321,  382,  268,  322,  323,  371,  220,  283,  271,  323,  383,  325,
	  324,  324,  383,  325,  327,  329,  330,  331,  332,  333,  379,  231,
	  327,  335,  336,  337,  338,  339,  340,  341,  342,  380,  244,  343,
	  344,  371,  220,  343,  344,  344,  346,  347,  348,  349,  350,  351,
	  352,  381,  254,  353,  354,  371,  220,  353,  354,  354,  356,  357,
	  358,  359,  360,  361,  362,  363,  364,  365,  382,  268,  366,  367,
	  371,  220,  327,  271,  367,  383,  325,  368,  368,  368,  272,  229,
	  243,  253,  324
	};
}

private static final short _robots_trans_targs[] = init__robots_trans_targs_0();


private static byte[] init__robots_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   41,   41,    9,   41,    0,   41,    9,    9,    9,    9,
	   11,   11,    0,   11,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   41,   41,    9,   41,    0,   41,    9,    9,
	    9,    9,   11,   11,    0,   11,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   83,   83,    5,   83,
	   26,   26,    5,   26,    0,   26,    5,    5,    5,    5,    7,    7,
	    0,    7,    0,    0,    0,    0,    0,    0,   91,   91,    9,   91,
	   35,   35,    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   95,   95,   13,   95,
	   56,   56,   13,   56,    0,   56,   13,   13,   13,   13,   15,   15,
	    0,   15,    0,    0,    0,    0,    0,    0,   99,   99,    9,   99,
	   53,   53,    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   87,   87,    5,   87,   38,   38,    0,   38,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   15,   15,    1,    1,    1,    1,    3,    3,    3,
	    0,    3,    0,    1,    1,    1,    1,    0,    0,    0,    0,    0,
	   75,   75,    9,   75,   20,   20,    0,   20,    0,    0,    0,    0,
	    0,    0,    0,    0,   71,   71,    5,   71,   17,   17,    0,   17,
	    0,    0,    0,    0,    0,    0,    0,   79,   79,   13,   79,   23,
	   23,    0,   23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    3,    3,    0,   23,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    7,    7,    1,    1,   17,    0,    0,    0,    0,
	    0,    0,    0,  107,  107,   13,  107,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   11,   11,    1,    1,   20,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   26,   26,    5,   26,
	    0,   26,    5,    5,    5,    5,    7,    7,    0,    7,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   91,   91,    9,   91,   11,
	   11,    0,   11,   41,   35,   35,    0,   35,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   32,   32,   32,    7,    7,    0,    7,
	   26,    0,    0,    0,    0,    0,    0,    0,   95,   95,   13,   95,
	   15,   15,    0,   15,   56,   38,   38,    0,   38,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    7,    7,    1,    1,
	    0,   29,   29,   29,   29,    0,    3,    7,    7,    0,    0,    7,
	    0,    0,    0,    0,    0,    0,    0,   56,   56,   13,   56,    0,
	   56,   13,   13,   13,   13,   15,   15,    0,   15,    0,    0,    0,
	    0,    0,    0,  115,  115,    9,  115,   65,   65,    0,   65,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,  111,  111,    5,  111,
	   62,   62,    0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
	   68,   68,   68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   15,   15,    1,    1,   59,   59,   59,   59,    0,   15,   15,
	    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,   50,   50,
	   50,    0,    0,    0,    0,    0,    0,    0,    0,  103,  103,    5,
	  103,   47,   47,    0,   47,    0,    0,    0,    0,    0,    0,    0,
	    0,  107,  107,   13,  107,   53,   53,    0,   53,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   11,   11,    1,    1,
	   44,   44,   44,   44,    0,   11,   11,    0,   11,   41,   26,   41,
	   26,   56,   56
	};
}

private static final byte _robots_trans_actions[] = init__robots_trans_actions_0();


private static byte[] init__robots_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,   11,   11,
	    0,    0,    0,    0,    0,    0,    0,   11,   11,   11,    0,   11,
	   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   35,    7,    7,    7,    7,    7,    7,    7,    7,    7,   35,
	   35,   35,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,   38,   15,   15,   15,   15,   15,   15,
	   15,   15,   15,   53,   53,   53,   15,   15,   15,   15,   15,   15,
	   15,   15,   38,   38,   38,   15,   15,   15,   15,   15,   15,   15,
	   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,    0,
	    3,    3,    0,    3,    3,    3,    3,    3,   20,   20,    3,    3,
	    3,    3,    3,    3,    3,    3,   17,   17,    3,    3,    3,    3,
	    3,    3,    3,   23,   23,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    0,   23,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,   17,   11,   11,   11,   11,   11,   11,
	   11,   53,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   20,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    7,    7,    7,    0,    7,    0,    7,    7,    7,    7,    7,
	   35,   11,    0,   11,   35,   35,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
	   38,   15,   15,   38,   38,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    0,   29,   29,    3,    7,    0,    0,    0,
	    0,    0,    0,    0,   15,   15,   15,   15,   15,   15,   15,   15,
	   15,   65,   65,   65,   15,   15,   15,   15,   15,   15,   15,   15,
	   62,   62,   62,   15,   15,   15,   15,   15,   15,   15,   15,   15,
	   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   59,   59,
	   15,    0,    0,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   11,   11,   11,   11,   11,   47,   47,   47,   11,   11,   11,
	   11,   11,   11,   11,   53,   53,   53,   11,   11,   11,   11,   11,
	   11,   11,   11,   11,   11,   11,   44,   44,   11,    0,   11,    0,
	    0,   11,    7,   15,    0,    0,    7,   11,    7,   15,    0,    0,
	   15
	};
}

private static final byte _robots_eof_actions[] = init__robots_eof_actions_0();


static final int robots_start = 369;
static final int robots_first_final = 369;
static final int robots_error = 0;

static final int robots_en_main = 369;


// line 191 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"

  public IPersistentVector parse(String input) throws ParseException {
    char[] data = input.toCharArray();
    int cs;
    int eof = data.length;
    int p = 0;
    int pe = eof;

    // agent name start position
    int ansp = 0;

    // disallow rule start position
    int drsp = 0;

    // allow rule start position
    int arsp = 0;

    // sitemap line start position
    int slsp = 0;

    ITransientVector result = PersistentVector.create().asTransient();

    
// line 890 "src/java/clojurewerkz/crawlista/robots/Parser.java"
	{
	cs = robots_start;
	}

// line 214 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
    
// line 897 "src/java/clojurewerkz/crawlista/robots/Parser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _robots_key_offsets[cs];
	_trans = _robots_index_offsets[cs];
	_klen = _robots_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _robots_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _robots_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _robots_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _robots_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _robots_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _robots_indicies[_trans];
	cs = _robots_trans_targs[_trans];

	if ( _robots_trans_actions[_trans] != 0 ) {
		_acts = _robots_trans_actions[_trans];
		_nacts = (int) _robots_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _robots_actions[_acts++] )
			{
	case 0:
// line 16 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_start. p = " + p);
    ansp = p;
  }
	break;
	case 1:
// line 21 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_end. p = " + p);
    String lastSeenUserAgentName = new String(data, ansp, (p - ansp));
    // System.out.println("Daw agent: " + lastSeenUserAgentName);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("user-agent", lastSeenUserAgentName.trim()));
  }
	break;
	case 2:
// line 35 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_start. p = " + p);
    drsp = p;
  }
	break;
	case 3:
// line 40 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "disallow none" case (Disallow:)
    if(rule.equals("Disallow:")) {
      rule = "";
    }

    // System.out.println("Saw disallow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("disallow", rule.trim()));
  }
	break;
	case 4:
// line 61 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_start. p = " + p);
    arsp = p;
  }
	break;
	case 5:
// line 66 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_end. p = " + p);

    String rule = new String(data, arsp, (p - arsp));
    // we matched "allow none" case (Allow:)
    if(rule.equals("Allow:")) {
      rule = "";
    }

    // System.out.println("Saw allow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("allow", rule.trim()));
  }
	break;
	case 6:
// line 86 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: sitemap_rule_start. p = " + p);
    slsp = p;
  }
	break;
	case 7:
// line 91 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: sitemap_rule_end. p = " + p);

    String rule = new String(data, slsp, (p - slsp));
    // we matched empty sitemap line (Sitemap:)
    if(!rule.equals("Sitemap:")) {
      // System.out.println("Saw sitemap_rule: " + rule);

      IPersistentMap m = PersistentHashMap.create();
      result.conj(m.assoc("sitemap", rule.trim()));
    }
  }
	break;
// line 1065 "src/java/clojurewerkz/crawlista/robots/Parser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _robots_eof_actions[cs];
	int __nacts = (int) _robots_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _robots_actions[__acts++] ) {
	case 1:
// line 21 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_end. p = " + p);
    String lastSeenUserAgentName = new String(data, ansp, (p - ansp));
    // System.out.println("Daw agent: " + lastSeenUserAgentName);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("user-agent", lastSeenUserAgentName.trim()));
  }
	break;
	case 3:
// line 40 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "disallow none" case (Disallow:)
    if(rule.equals("Disallow:")) {
      rule = "";
    }

    // System.out.println("Saw disallow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("disallow", rule.trim()));
  }
	break;
	case 5:
// line 66 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_end. p = " + p);

    String rule = new String(data, arsp, (p - arsp));
    // we matched "allow none" case (Allow:)
    if(rule.equals("Allow:")) {
      rule = "";
    }

    // System.out.println("Saw allow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("allow", rule.trim()));
  }
	break;
	case 7:
// line 91 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: sitemap_rule_end. p = " + p);

    String rule = new String(data, slsp, (p - slsp));
    // we matched empty sitemap line (Sitemap:)
    if(!rule.equals("Sitemap:")) {
      // System.out.println("Saw sitemap_rule: " + rule);

      IPersistentMap m = PersistentHashMap.create();
      result.conj(m.assoc("sitemap", rule.trim()));
    }
  }
	break;
// line 1146 "src/java/clojurewerkz/crawlista/robots/Parser.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 215 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"

    if(cs == robots_error) {
      throw new ParseException("Unparseable input: " + input + ", p = " + p, p);
    }

    return (IPersistentVector)result.persistent();
  }
}
