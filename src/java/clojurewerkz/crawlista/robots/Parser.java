
// line 1 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
package clojurewerkz.crawlista.robots;


import java.text.ParseException;

import clojure.lang.IPersistentMap;
import clojure.lang.ITransientMap;
import clojure.lang.PersistentHashMap;
import clojure.lang.ITransientVector;
import clojure.lang.IPersistentVector;
import clojure.lang.PersistentVector;



// line 161 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"


public class Parser {
  
// line 23 "src/java/clojurewerkz/crawlista/robots/Parser.java"
private static byte[] init__robots_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    2,    1,    3,    2,    1,    5,    2,    2,    3,    2,    3,
	    1,    2,    3,    2,    2,    3,    5,    2,    4,    5,    2,    5,
	    1,    2,    5,    3,    2,    5,    4,    3,    1,    2,    3,    3,
	    1,    4,    5,    3,    2,    3,    5,    3,    3,    4,    5,    3,
	    5,    2,    3
	};
}

private static final byte _robots_actions[] = init__robots_actions_0();


private static short[] init__robots_key_offsets_0()
{
	return new short [] {
	    0,    0,   10,   15,   16,   18,   20,   22,   24,   25,   36,   53,
	   59,   69,   74,   76,   78,   80,   82,   83,   94,  111,  117,  118,
	  125,  133,  141,  149,  157,  164,  172,  180,  188,  196,  204,  212,
	  220,  227,  238,  249,  266,  272,  279,  287,  295,  303,  311,  318,
	  329,  335,  342,  350,  358,  366,  374,  382,  390,  398,  405,  413,
	  421,  429,  436,  444,  452,  460,  468,  476,  483,  499,  507,  510,
	  513,  528,  533,  538,  543,  548,  552,  563,  569,  574,  579,  584,
	  589,  594,  599,  604,  608,  619,  625,  630,  635,  640,  644,  649,
	  654,  659,  664,  669,  673,  684,  693,  699,  707,  715,  723,  730,
	  738,  746,  754,  762,  770,  777,  793,  799,  801,  803,  805,  807,
	  809,  811,  813,  814,  816,  818,  820,  821,  823,  825,  827,  829,
	  831,  832,  837,  847,  849,  851,  853,  855,  857,  859,  861,  862,
	  873,  890,  896,  897,  904,  909,  917,  925,  933,  941,  948,  959,
	  966,  967,  978,  984,  991,  999, 1007, 1015, 1023, 1031, 1039, 1047,
	 1054, 1065, 1072, 1083, 1091, 1099, 1107, 1114, 1122, 1130, 1138, 1146,
	 1154, 1161, 1177, 1186, 1192, 1198, 1201, 1208, 1209, 1214, 1221, 1229,
	 1237, 1245, 1253, 1260, 1271, 1279, 1287, 1295, 1303, 1311, 1319, 1327,
	 1334, 1345, 1351, 1358, 1366, 1374, 1382, 1389, 1397, 1405, 1413, 1421,
	 1429, 1436, 1452, 1458, 1464, 1471, 1481, 1498, 1508, 1518, 1535, 1552,
	 1567, 1577, 1594, 1611, 1628, 1643
	};
}

private static final short _robots_key_offsets[] = init__robots_key_offsets_0();


private static char[] init__robots_trans_keys_0()
{
	return new char [] {
	   32,   35,   65,   68,   85,   97,  100,  117,    9,   13,   10,   13,
	  127,    0,   31,   10,   76,  108,   76,  108,   79,  111,   87,  119,
	   58,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,
	   10,   13,   32,   35,   65,   68,   85,   97,  100,  117,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,   32,   32,
	   35,   65,   68,   85,   97,  100,  117,    9,   13,   10,   13,  127,
	    0,   31,   76,  108,   76,  108,   79,  111,   87,  119,   58,   10,
	   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,
	   32,   35,   65,   68,   85,   97,  100,  117,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   35,  127,    0,   32,   10,   10,   13,
	   32,   35,  127,    0,   31,   10,   13,   35,   76,  108,  127,    0,
	   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,
	   79,  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,
	   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   35,   73,
	  105,  127,    0,   32,   10,   13,   35,   83,  115,  127,    0,   32,
	   10,   13,   35,   65,   97,  127,    0,   32,   10,   13,   35,   76,
	  108,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,
	   10,   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,   87,
	  119,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,
	   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,
	   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,   32,
	   35,   65,   68,   85,   97,  100,  117,  127,    0,    8,    9,   12,
	   14,   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,
	  127,    0,   31,   10,   13,   35,   76,  108,  127,    0,   32,   10,
	   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   79,  111,
	  127,    0,   32,   10,   13,   35,   87,  119,  127,    0,   32,   10,
	   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,  127,    0,
	    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,   32,   10,
	   13,   32,   35,  127,    0,   31,   10,   13,   35,   73,  105,  127,
	    0,   32,   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,
	   35,   65,   97,  127,    0,   32,   10,   13,   35,   76,  108,  127,
	    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,   13,
	   35,   79,  111,  127,    0,   32,   10,   13,   35,   87,  119,  127,
	    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   35,
	   83,  115,  127,    0,   32,   10,   13,   35,   69,  101,  127,    0,
	   32,   10,   13,   35,   82,  114,  127,    0,   32,   10,   13,   35,
	   45,  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,
	   10,   13,   35,   71,  103,  127,    0,   32,   10,   13,   35,   69,
	  101,  127,    0,   32,   10,   13,   35,   78,  110,  127,    0,   32,
	   10,   13,   35,   84,  116,  127,    0,   32,   10,   13,   35,   58,
	  127,    0,   32,   10,   13,   32,   35,   42,  127,    0,    8,    9,
	   12,   14,   31,   65,   90,   97,  122,   32,   42,    9,   13,   65,
	   90,   97,  122,   10,   13,   35,   10,   13,   35,   32,   35,   42,
	   65,   68,   85,   97,  100,  117,    9,   13,   66,   90,   98,  122,
	   10,   13,   35,   76,  108,   10,   13,   35,   76,  108,   10,   13,
	   35,   79,  111,   10,   13,   35,   87,  119,   10,   13,   35,   58,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,  127,    0,   32,   10,   13,   35,   73,  105,   10,   13,
	   35,   83,  115,   10,   13,   35,   65,   97,   10,   13,   35,   76,
	  108,   10,   13,   35,   76,  108,   10,   13,   35,   79,  111,   10,
	   13,   35,   87,  119,   10,   13,   35,   58,   10,   13,   32,   35,
	  127,    0,    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,
	   32,   10,   13,   35,   83,  115,   10,   13,   35,   69,  101,   10,
	   13,   35,   82,  114,   10,   13,   35,   45,   10,   13,   35,   65,
	   97,   10,   13,   35,   71,  103,   10,   13,   35,   69,  101,   10,
	   13,   35,   78,  110,   10,   13,   35,   84,  116,   10,   13,   35,
	   58,   10,   13,   32,   35,   42,    9,   12,   65,   90,   97,  122,
	   10,   32,   42,    9,   13,   65,   90,   97,  122,   10,   13,   35,
	  127,    0,   32,   10,   13,   35,   83,  115,  127,    0,   32,   10,
	   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   82,  114,
	  127,    0,   32,   10,   13,   35,   45,  127,    0,   32,   10,   13,
	   35,   65,   97,  127,    0,   32,   10,   13,   35,   71,  103,  127,
	    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,   13,
	   35,   78,  110,  127,    0,   32,   10,   13,   35,   84,  116,  127,
	    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,
	   35,   42,  127,    0,    8,    9,   12,   14,   31,   65,   90,   97,
	  122,   10,   13,   35,  127,    0,   32,   73,  105,   83,  115,   65,
	   97,   76,  108,   76,  108,   79,  111,   87,  119,   58,   83,  115,
	   69,  101,   82,  114,   45,   65,   97,   71,  103,   69,  101,   78,
	  110,   84,  116,   58,   10,   13,  127,    0,   31,   32,   35,   65,
	   68,   85,   97,  100,  117,    9,   13,   73,  105,   83,  115,   65,
	   97,   76,  108,   76,  108,   79,  111,   87,  119,   58,   10,   13,
	   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,   32,
	   35,   65,   68,   85,   97,  100,  117,  127,    0,    8,    9,   12,
	   14,   31,   10,   13,   35,  127,    0,   32,   10,   10,   13,   32,
	   35,  127,    0,   31,   10,   13,  127,    0,   31,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,
	   32,   10,   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,
	   87,  119,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   32,   35,  127,    0,   31,   10,   10,   13,   32,   35,  127,
	    0,    8,    9,   12,   14,   31,   10,   13,   35,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,   73,  105,
	  127,    0,   32,   10,   13,   35,   83,  115,  127,    0,   32,   10,
	   13,   35,   65,   97,  127,    0,   32,   10,   13,   35,   76,  108,
	  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,   32,   10,
	   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,   87,  119,
	  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,
	   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,   13,   32,
	   35,  127,    0,   31,   10,   13,   32,   35,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   35,   83,  115,  127,    0,   32,   10,
	   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,   82,  114,
	  127,    0,   32,   10,   13,   35,   45,  127,    0,   32,   10,   13,
	   35,   65,   97,  127,    0,   32,   10,   13,   35,   71,  103,  127,
	    0,   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,   13,
	   35,   78,  110,  127,    0,   32,   10,   13,   35,   84,  116,  127,
	    0,   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,
	   35,   42,  127,    0,    8,    9,   12,   14,   31,   65,   90,   97,
	  122,   10,   32,   42,    9,   13,   65,   90,   97,  122,   10,   13,
	   35,  127,    0,   32,   10,   13,   35,  127,    0,   32,   10,   13,
	   35,   10,   13,   32,   35,  127,    0,   31,   10,   10,   13,  127,
	    0,   31,   10,   13,   32,   35,  127,    0,   31,   10,   13,   35,
	   76,  108,  127,    0,   32,   10,   13,   35,   76,  108,  127,    0,
	   32,   10,   13,   35,   79,  111,  127,    0,   32,   10,   13,   35,
	   87,  119,  127,    0,   32,   10,   13,   35,   58,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   35,   73,  105,  127,    0,   32,   10,   13,   35,   83,  115,
	  127,    0,   32,   10,   13,   35,   65,   97,  127,    0,   32,   10,
	   13,   35,   76,  108,  127,    0,   32,   10,   13,   35,   76,  108,
	  127,    0,   32,   10,   13,   35,   79,  111,  127,    0,   32,   10,
	   13,   35,   87,  119,  127,    0,   32,   10,   13,   35,   58,  127,
	    0,   32,   10,   13,   32,   35,  127,    0,    8,    9,   12,   14,
	   31,   10,   13,   35,  127,    0,   32,   10,   13,   32,   35,  127,
	    0,   31,   10,   13,   35,   83,  115,  127,    0,   32,   10,   13,
	   35,   69,  101,  127,    0,   32,   10,   13,   35,   82,  114,  127,
	    0,   32,   10,   13,   35,   45,  127,    0,   32,   10,   13,   35,
	   65,   97,  127,    0,   32,   10,   13,   35,   71,  103,  127,    0,
	   32,   10,   13,   35,   69,  101,  127,    0,   32,   10,   13,   35,
	   78,  110,  127,    0,   32,   10,   13,   35,   84,  116,  127,    0,
	   32,   10,   13,   35,   58,  127,    0,   32,   10,   13,   32,   35,
	   42,  127,    0,    8,    9,   12,   14,   31,   65,   90,   97,  122,
	   10,   13,   35,  127,    0,   32,   10,   13,   35,  127,    0,   32,
	   10,   13,   32,   35,  127,    0,   31,   32,   35,   65,   68,   85,
	   97,  100,  117,    9,   13,   10,   13,   32,   35,   65,   68,   85,
	   97,  100,  117,  127,    0,    8,    9,   12,   14,   31,   32,   35,
	   65,   68,   85,   97,  100,  117,    9,   13,   32,   35,   65,   68,
	   85,   97,  100,  117,    9,   13,   10,   13,   32,   35,   65,   68,
	   85,   97,  100,  117,  127,    0,    8,    9,   12,   14,   31,   10,
	   13,   32,   35,   65,   68,   85,   97,  100,  117,  127,    0,    8,
	    9,   12,   14,   31,   32,   35,   42,   65,   68,   85,   97,  100,
	  117,    9,   13,   66,   90,   98,  122,   32,   35,   65,   68,   85,
	   97,  100,  117,    9,   13,   10,   13,   32,   35,   65,   68,   85,
	   97,  100,  117,  127,    0,    8,    9,   12,   14,   31,   10,   13,
	   32,   35,   65,   68,   85,   97,  100,  117,  127,    0,    8,    9,
	   12,   14,   31,   10,   13,   32,   35,   65,   68,   85,   97,  100,
	  117,  127,    0,    8,    9,   12,   14,   31,   32,   35,   42,   65,
	   68,   85,   97,  100,  117,    9,   13,   66,   90,   98,  122,   32,
	   35,   65,   68,   85,   97,  100,  117,    9,   13,    0
	};
}

private static final char _robots_trans_keys[] = init__robots_trans_keys_0();


private static byte[] init__robots_single_lengths_0()
{
	return new byte [] {
	    0,    8,    3,    1,    2,    2,    2,    2,    1,    5,   11,    4,
	    8,    3,    2,    2,    2,    2,    1,    5,   11,    4,    1,    5,
	    6,    6,    6,    6,    5,    6,    6,    6,    6,    6,    6,    6,
	    5,    5,    5,   11,    4,    5,    6,    6,    6,    6,    5,    5,
	    4,    5,    6,    6,    6,    6,    6,    6,    6,    5,    6,    6,
	    6,    5,    6,    6,    6,    6,    6,    5,    6,    2,    3,    3,
	    9,    5,    5,    5,    5,    4,    5,    4,    5,    5,    5,    5,
	    5,    5,    5,    4,    5,    4,    5,    5,    5,    4,    5,    5,
	    5,    5,    5,    4,    5,    3,    4,    6,    6,    6,    5,    6,
	    6,    6,    6,    6,    5,    6,    4,    2,    2,    2,    2,    2,
	    2,    2,    1,    2,    2,    2,    1,    2,    2,    2,    2,    2,
	    1,    3,    8,    2,    2,    2,    2,    2,    2,    2,    1,    5,
	   11,    4,    1,    5,    3,    6,    6,    6,    6,    5,    5,    5,
	    1,    5,    4,    5,    6,    6,    6,    6,    6,    6,    6,    5,
	    5,    5,    5,    6,    6,    6,    5,    6,    6,    6,    6,    6,
	    5,    6,    3,    4,    4,    3,    5,    1,    3,    5,    6,    6,
	    6,    6,    5,    5,    6,    6,    6,    6,    6,    6,    6,    5,
	    5,    4,    5,    6,    6,    6,    5,    6,    6,    6,    6,    6,
	    5,    6,    4,    4,    5,    8,   11,    8,    8,   11,   11,    9,
	    8,   11,   11,   11,    9,    8
	};
}

private static final byte _robots_single_lengths[] = init__robots_single_lengths_0();


private static byte[] init__robots_range_lengths_0()
{
	return new byte [] {
	    0,    1,    1,    0,    0,    0,    0,    0,    0,    3,    3,    1,
	    1,    1,    0,    0,    0,    0,    0,    3,    3,    1,    0,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    3,    3,    3,    1,    1,    1,    1,    1,    1,    1,    3,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    5,    3,    0,    0,
	    3,    0,    0,    0,    0,    0,    3,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    3,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    3,    3,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    5,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    3,
	    3,    1,    0,    1,    1,    1,    1,    1,    1,    1,    3,    1,
	    0,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    3,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    5,    3,    1,    1,    0,    1,    0,    1,    1,    1,    1,
	    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
	    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    5,    1,    1,    1,    1,    3,    1,    1,    3,    3,    3,
	    1,    3,    3,    3,    3,    1
	};
}

private static final byte _robots_range_lengths[] = init__robots_range_lengths_0();


private static short[] init__robots_index_offsets_0()
{
	return new short [] {
	    0,    0,   10,   15,   17,   20,   23,   26,   29,   31,   40,   55,
	   61,   71,   76,   79,   82,   85,   88,   90,   99,  114,  120,  122,
	  129,  137,  145,  153,  161,  168,  176,  184,  192,  200,  208,  216,
	  224,  231,  240,  249,  264,  270,  277,  285,  293,  301,  309,  316,
	  325,  331,  338,  346,  354,  362,  370,  378,  386,  394,  401,  409,
	  417,  425,  432,  440,  448,  456,  464,  472,  479,  491,  497,  501,
	  505,  518,  524,  530,  536,  542,  547,  556,  562,  568,  574,  580,
	  586,  592,  598,  604,  609,  618,  624,  630,  636,  642,  647,  653,
	  659,  665,  671,  677,  682,  691,  698,  704,  712,  720,  728,  735,
	  743,  751,  759,  767,  775,  782,  794,  800,  803,  806,  809,  812,
	  815,  818,  821,  823,  826,  829,  832,  834,  837,  840,  843,  846,
	  849,  851,  856,  866,  869,  872,  875,  878,  881,  884,  887,  889,
	  898,  913,  919,  921,  928,  933,  941,  949,  957,  965,  972,  981,
	  988,  990,  999, 1005, 1012, 1020, 1028, 1036, 1044, 1052, 1060, 1068,
	 1075, 1084, 1091, 1100, 1108, 1116, 1124, 1131, 1139, 1147, 1155, 1163,
	 1171, 1178, 1190, 1197, 1203, 1209, 1213, 1220, 1222, 1227, 1234, 1242,
	 1250, 1258, 1266, 1273, 1282, 1290, 1298, 1306, 1314, 1322, 1330, 1338,
	 1345, 1354, 1360, 1367, 1375, 1383, 1391, 1398, 1406, 1414, 1422, 1430,
	 1438, 1445, 1457, 1463, 1469, 1476, 1486, 1501, 1511, 1521, 1536, 1551,
	 1564, 1574, 1589, 1604, 1619, 1632
	};
}

private static final short _robots_index_offsets[] = init__robots_index_offsets_0();


private static short[] init__robots_indicies_0()
{
	return new short [] {
	    0,    2,    3,    4,    5,    3,    4,    5,    0,    1,    6,    7,
	    1,    1,    2,    6,    1,    8,    8,    1,    9,    9,    1,   10,
	   10,    1,   11,   11,    1,   12,    1,   13,   14,   12,   16,    1,
	    1,   12,    1,   15,   13,   18,   17,   16,   19,   20,   21,   19,
	   20,   21,    1,    1,   17,    1,   15,   22,   23,   25,    1,    1,
	   24,   26,   27,   28,   29,    5,   28,   29,    5,   26,    1,   30,
	   31,    1,    1,   27,   32,   32,    1,   33,   33,    1,   34,   34,
	    1,   35,   35,    1,   36,    1,   37,   38,   36,   40,    1,    1,
	   36,    1,   39,   37,   42,   41,   40,   43,   44,   45,   43,   44,
	   45,    1,    1,   41,    1,   39,   46,   47,   49,    1,    1,   48,
	   30,    1,   46,   47,   27,   49,    1,    1,   50,   46,   47,   49,
	   51,   51,    1,    1,   48,   46,   47,   49,   52,   52,    1,    1,
	   48,   46,   47,   49,   53,   53,    1,    1,   48,   46,   47,   49,
	   54,   54,    1,    1,   48,   46,   47,   49,   36,    1,    1,   48,
	   46,   47,   49,   55,   55,    1,    1,   48,   46,   47,   49,   56,
	   56,    1,    1,   48,   46,   47,   49,   57,   57,    1,    1,   48,
	   46,   47,   49,   58,   58,    1,    1,   48,   46,   47,   49,   59,
	   59,    1,    1,   48,   46,   47,   49,   60,   60,    1,    1,   48,
	   46,   47,   49,   61,   61,    1,    1,   48,   46,   47,   49,   62,
	    1,    1,   48,   64,   65,   63,   67,    1,    1,   63,    1,   66,
	   68,   69,   63,   71,    1,    1,   63,    1,   70,   68,   73,   72,
	   71,   74,   75,   76,   74,   75,   76,    1,    1,   72,    1,   70,
	   77,   78,   80,    1,    1,   79,   77,   78,   27,   80,    1,    1,
	   81,   77,   78,   80,   82,   82,    1,    1,   79,   77,   78,   80,
	   83,   83,    1,    1,   79,   77,   78,   80,   84,   84,    1,    1,
	   79,   77,   78,   80,   85,   85,    1,    1,   79,   77,   78,   80,
	   86,    1,    1,   79,   87,   88,   36,   90,    1,    1,   36,    1,
	   89,   91,   92,   94,    1,    1,   93,   91,   92,   27,   94,    1,
	    1,   95,   77,   78,   80,   96,   96,    1,    1,   79,   77,   78,
	   80,   97,   97,    1,    1,   79,   77,   78,   80,   98,   98,    1,
	    1,   79,   77,   78,   80,   99,   99,    1,    1,   79,   77,   78,
	   80,  100,  100,    1,    1,   79,   77,   78,   80,  101,  101,    1,
	    1,   79,   77,   78,   80,  102,  102,    1,    1,   79,   77,   78,
	   80,   63,    1,    1,   79,   77,   78,   80,  103,  103,    1,    1,
	   79,   77,   78,   80,  104,  104,    1,    1,   79,   77,   78,   80,
	  105,  105,    1,    1,   79,   77,   78,   80,  106,    1,    1,   79,
	   77,   78,   80,  107,  107,    1,    1,   79,   77,   78,   80,  108,
	  108,    1,    1,   79,   77,   78,   80,  109,  109,    1,    1,   79,
	   77,   78,   80,  110,  110,    1,    1,   79,   77,   78,   80,  111,
	  111,    1,    1,   79,   77,   78,   80,  112,    1,    1,   79,  114,
	  115,  113,   80,  116,    1,    1,  113,    1,  117,  117,   79,  113,
	  118,  113,  119,  119,    1,  120,  121,  122,    1,  120,  124,  122,
	  123,  125,   27,  118,  126,  127,  128,  126,  127,  128,  125,  119,
	  119,    1,  120,  124,  122,  129,  129,  123,  120,  124,  122,  130,
	  130,  123,  120,  124,  122,  131,  131,  123,  120,  124,  122,  132,
	  132,  123,  120,  124,  122,  133,  123,  134,  135,  133,  137,  123,
	  123,  133,  123,  136,  138,  139,  141,  123,  123,  140,  120,  124,
	  122,  142,  142,  123,  120,  124,  122,  143,  143,  123,  120,  124,
	  122,  144,  144,  123,  120,  124,  122,  145,  145,  123,  120,  124,
	  122,  146,  146,  123,  120,  124,  122,  147,  147,  123,  120,  124,
	  122,  148,  148,  123,  120,  124,  122,  149,  123,  150,  151,  149,
	  153,  123,  123,  149,  123,  152,  154,  155,  157,  123,  123,  156,
	  120,  124,  122,  158,  158,  123,  120,  124,  122,  159,  159,  123,
	  120,  124,  122,  160,  160,  123,  120,  124,  122,  161,  123,  120,
	  124,  122,  162,  162,  123,  120,  124,  122,  163,  163,  123,  120,
	  124,  122,  164,  164,  123,  120,  124,  122,  165,  165,  123,  120,
	  124,  122,  166,  166,  123,  120,  124,  122,  167,  123,  168,  169,
	  167,  122,  119,  167,  119,  119,  123,  170,  113,  118,  113,  119,
	  119,    1,  154,  171,  157,    1,    1,   79,   46,   47,   49,  172,
	  172,    1,    1,   48,   46,   47,   49,  173,  173,    1,    1,   48,
	   46,   47,   49,  174,  174,    1,    1,   48,   46,   47,   49,  175,
	    1,    1,   48,   46,   47,   49,  176,  176,    1,    1,   48,   46,
	   47,   49,  177,  177,    1,    1,   48,   46,   47,   49,  178,  178,
	    1,    1,   48,   46,   47,   49,  179,  179,    1,    1,   48,   46,
	   47,   49,  180,  180,    1,    1,   48,   46,   47,   49,  181,    1,
	    1,   48,  182,  183,  113,   49,  184,    1,    1,  113,    1,  185,
	  185,   48,  138,  186,  141,    1,    1,   48,  187,  187,    1,  188,
	  188,    1,  189,  189,    1,  190,  190,    1,  191,  191,    1,  192,
	  192,    1,  193,  193,    1,   63,    1,  194,  194,    1,  195,  195,
	    1,  196,  196,    1,  197,    1,  198,  198,    1,  199,  199,    1,
	  200,  200,    1,  201,  201,    1,  202,  202,    1,  113,    1,  203,
	  204,    1,    1,  205,  206,   27,    3,    4,    5,    3,    4,    5,
	  206,    1,  207,  207,    1,  208,  208,    1,  209,  209,    1,  210,
	  210,    1,  211,  211,    1,  212,  212,    1,  213,  213,    1,  214,
	    1,  215,  216,  214,  218,    1,    1,  214,    1,  217,  215,  220,
	  219,  218,  221,  222,  223,  221,  222,  223,    1,    1,  219,    1,
	  217,  224,  225,  227,    1,    1,  226,  228,    1,  224,  225,  229,
	  227,    1,    1,  230,  228,  231,    1,    1,  229,  224,  225,  227,
	  232,  232,    1,    1,  226,  224,  225,  227,  233,  233,    1,    1,
	  226,  224,  225,  227,  234,  234,    1,    1,  226,  224,  225,  227,
	  235,  235,    1,    1,  226,  224,  225,  227,  236,    1,    1,  226,
	  237,  238,   36,  240,    1,    1,   36,    1,  239,  241,  242,  205,
	  244,    1,    1,  243,  203,    1,  245,   38,   36,   40,    1,    1,
	   36,    1,   39,  246,  247,  249,    1,    1,  248,  246,  247,  229,
	  249,    1,    1,  250,  224,  225,  227,  251,  251,    1,    1,  226,
	  224,  225,  227,  252,  252,    1,    1,  226,  224,  225,  227,  253,
	  253,    1,    1,  226,  224,  225,  227,  254,  254,    1,    1,  226,
	  224,  225,  227,  255,  255,    1,    1,  226,  224,  225,  227,  256,
	  256,    1,    1,  226,  224,  225,  227,  257,  257,    1,    1,  226,
	  224,  225,  227,  258,    1,    1,  226,  259,  260,   63,  261,    1,
	    1,   63,    1,  217,  262,  263,  205,  265,    1,    1,  264,  266,
	   69,   63,   71,    1,    1,   63,    1,   70,  224,  225,  227,  267,
	  267,    1,    1,  226,  224,  225,  227,  268,  268,    1,    1,  226,
	  224,  225,  227,  269,  269,    1,    1,  226,  224,  225,  227,  270,
	    1,    1,  226,  224,  225,  227,  271,  271,    1,    1,  226,  224,
	  225,  227,  272,  272,    1,    1,  226,  224,  225,  227,  273,  273,
	    1,    1,  226,  224,  225,  227,  274,  274,    1,    1,  226,  224,
	  225,  227,  275,  275,    1,    1,  226,  224,  225,  227,  276,    1,
	    1,  226,  277,  278,  113,  227,  279,    1,    1,  113,    1,  280,
	  280,  226,  281,  113,  118,  113,  119,  119,    1,  282,  283,  284,
	    1,    1,  226,  282,  285,  284,  123,  123,  286,  287,  124,  122,
	  123,  288,  289,  290,  292,    1,    1,  291,  293,    1,  293,  294,
	    1,    1,  290,   22,   23,  229,   25,    1,    1,  295,   22,   23,
	   25,  296,  296,    1,    1,   24,   22,   23,   25,  297,  297,    1,
	    1,   24,   22,   23,   25,  298,  298,    1,    1,   24,   22,   23,
	   25,  299,  299,    1,    1,   24,   22,   23,   25,  300,    1,    1,
	   24,  301,  302,   36,  303,    1,    1,   36,    1,   15,   22,   23,
	   25,  304,  304,    1,    1,   24,   22,   23,   25,  305,  305,    1,
	    1,   24,   22,   23,   25,  306,  306,    1,    1,   24,   22,   23,
	   25,  307,  307,    1,    1,   24,   22,   23,   25,  308,  308,    1,
	    1,   24,   22,   23,   25,  309,  309,    1,    1,   24,   22,   23,
	   25,  310,  310,    1,    1,   24,   22,   23,   25,  311,    1,    1,
	   24,  312,  313,   63,  315,    1,    1,   63,    1,  314,  316,  317,
	  319,    1,    1,  318,  316,  317,  229,  319,    1,    1,  320,   22,
	   23,   25,  321,  321,    1,    1,   24,   22,   23,   25,  322,  322,
	    1,    1,   24,   22,   23,   25,  323,  323,    1,    1,   24,   22,
	   23,   25,  324,    1,    1,   24,   22,   23,   25,  325,  325,    1,
	    1,   24,   22,   23,   25,  326,  326,    1,    1,   24,   22,   23,
	   25,  327,  327,    1,    1,   24,   22,   23,   25,  328,  328,    1,
	    1,   24,   22,   23,   25,  329,  329,    1,    1,   24,   22,   23,
	   25,  330,    1,    1,   24,  331,  332,  113,   25,  333,    1,    1,
	  113,    1,  334,  334,   24,  335,  336,  337,    1,    1,   24,  335,
	  338,  337,  123,  123,  339,  340,  341,  290,  343,    1,    1,  342,
	    0,    2,    3,    4,    5,    3,    4,    5,    0,    1,   13,   18,
	   17,  344,   19,   20,   21,   19,   20,   21,    1,    1,   17,    1,
	   15,   26,  205,   28,   29,    5,   28,   29,    5,   26,    1,   26,
	   27,   28,   29,    5,   28,   29,    5,   26,    1,   37,   42,   41,
	   40,   43,   44,   45,   43,   44,   45,    1,    1,   41,    1,   39,
	   68,   73,   72,   71,   74,   75,   76,   74,   75,   76,    1,    1,
	   72,    1,   70,  125,   27,  118,  126,  127,  128,  126,  127,  128,
	  125,  119,  119,    1,  206,   27,    3,    4,    5,    3,    4,    5,
	  206,    1,  215,  220,  219,  345,  221,  222,  223,  221,  222,  223,
	    1,    1,  219,    1,  217,   37,   42,   41,  346,   43,   44,   45,
	   43,   44,   45,    1,    1,   41,    1,   39,   68,   73,   72,  347,
	   74,   75,   76,   74,   75,   76,    1,    1,   72,    1,   70,  125,
	  205,  118,  126,  127,  128,  126,  127,  128,  125,  119,  119,    1,
	  206,  205,    3,    4,    5,    3,    4,    5,  206,    1,    0
	};
}

private static final short _robots_indicies[] = init__robots_indicies_0();


private static short[] init__robots_trans_targs_0()
{
	return new short [] {
	    1,    0,    2,    4,  135,  123,  221,    3,    5,    6,    7,    8,
	    9,  222,    9,   11,  189,   10,   10,  190,  196,  207,  223,  146,
	   11,  189,   12,   13,   14,  115,  224,   22,   15,   16,   17,   18,
	   19,  225,   19,   21,   23,   20,   20,   24,   29,  103,  224,   22,
	   21,   23,   23,   25,   26,   27,   28,   30,   31,   32,   33,   34,
	   35,   36,   37,   38,  226,   38,   48,   49,  226,   38,   40,   41,
	   39,   39,   42,   50,   58,  224,   22,   40,   41,   41,   43,   44,
	   45,   46,   47,  225,   19,   48,   49,  224,   22,   48,   49,   49,
	   51,   52,   53,   54,   55,   56,   57,   59,   60,   61,   62,   63,
	   64,   65,   66,   67,   68,   69,  227,  101,  102,   89,   70,   71,
	  224,   22,   13,   71,   71,   72,   73,   80,   90,   74,   75,   76,
	   77,   78,  225,   78,   79,   23,  224,   71,   79,   23,   81,   82,
	   83,   84,   85,   86,   87,   88,  226,   88,   89,   41,  224,   71,
	   89,   41,   91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
	  227,  100,  227,   22,  104,  105,  106,  107,  108,  109,  110,  111,
	  112,  113,  227,  101,  114,   79,   22,  116,  117,  118,  119,  120,
	  121,  122,  124,  125,  126,  127,  128,  129,  130,  131,  132,  228,
	  156,  133,  134,  136,  137,  138,  139,  140,  141,  142,  143,  229,
	  143,  145,  147,  144,  144,  149,  160,  171,  223,  146,  145,  147,
	  223,  148,  147,  146,  150,  151,  152,  153,  154,  230,  157,  158,
	  159,  228,  156,  155,  155,  230,  223,  146,  158,  159,  159,  161,
	  162,  163,  164,  165,  166,  167,  168,  231,  170,  147,  228,  156,
	  169,  169,  231,  172,  173,  174,  175,  176,  177,  178,  179,  180,
	  181,  232,  182,  183,  184,  232,  223,  146,  147,  185,  184,  223,
	  233,  187,  188,  186,  186,  233,  187,  189,  191,  192,  193,  194,
	  195,  230,  157,  189,  197,  198,  199,  200,  201,  202,  203,  204,
	  231,  170,  205,  206,  223,  146,  205,  206,  206,  208,  209,  210,
	  211,  212,  213,  214,  215,  216,  217,  232,  182,  218,  219,  223,
	  146,  189,  185,  219,  233,  187,  220,  220,  220,  186,  155,  169
	};
}

private static final short _robots_trans_targs[] = init__robots_trans_targs_0();


private static byte[] init__robots_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   31,   31,    9,   31,    0,   31,    9,    9,    9,   11,   11,
	    0,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   31,   31,    9,   31,    0,   31,    9,    9,    9,   11,   11,
	    0,   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   51,   51,    5,   51,   19,   19,    5,   19,
	    0,   19,    5,    5,    5,    7,    7,    0,    7,    0,    0,    0,
	    0,    0,    0,   55,   55,    9,   55,   28,   28,    0,   28,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    7,    7,    1,    1,    1,    1,
	    3,    3,    3,    0,    3,    0,    1,    1,    1,    0,    0,    0,
	    0,    0,   47,   47,    9,   47,   16,   16,    0,   16,    0,    0,
	    0,    0,    0,    0,    0,    0,   43,   43,    5,   43,   13,   13,
	    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    3,    3,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   11,   11,    1,    1,   16,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
	   19,    5,   19,    0,   19,    5,    5,    5,    7,    7,    0,    7,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,   55,    9,
	   55,   11,   11,    0,   11,   31,   28,   28,    0,   28,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   25,   25,   25,    7,    7,
	    0,    7,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    7,    7,    1,    1,    0,   22,   22,   22,   22,    0,    3,
	    7,    7,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
	    0,   40,   40,   40,    0,    0,    0,    0,    0,    0,    0,    0,
	   59,   59,    5,   59,   37,   37,    0,   37,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   11,   11,    1,    1,   34,
	   34,   34,   34,    0,   11,   11,    0,   11,   31,   19,   31,   19
	};
}

private static final byte _robots_trans_actions[] = init__robots_trans_actions_0();


private static byte[] init__robots_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,   11,   11,
	    0,    0,    0,    0,    0,    0,    0,   11,   11,   11,    0,   11,
	   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   28,    7,    7,    7,    7,    7,    7,    7,    7,    7,   28,
	   28,   28,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,    7,    7,    7,    7,    0,    3,    3,
	    0,    3,    3,    3,    3,    3,   16,   16,    3,    3,    3,    3,
	    3,    3,    3,    3,   13,   13,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    0,   13,   11,   11,   11,   11,   11,
	   11,   11,   11,   11,   11,   11,   16,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
	    7,    7,    0,    7,    0,    7,    7,    7,    7,    7,   28,   11,
	    0,   11,   28,   28,    7,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
	    7,    7,    0,   22,   22,    3,    7,    0,    0,   11,   11,   11,
	   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   37,   37,   37,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   11,   34,   34,   11,    0,   11,    0,    0,   11,    7,    0,
	    0,    7,   11,    7,    0,    0
	};
}

private static final byte _robots_eof_actions[] = init__robots_eof_actions_0();


static final int robots_start = 221;
static final int robots_first_final = 221;
static final int robots_error = 0;

static final int robots_en_main = 221;


// line 165 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"

  public IPersistentVector parse(String input) throws ParseException {
    char[] data = input.toCharArray();
    int cs;
    int eof = data.length;
    int p = 0;
    int pe = eof;

    // agent name start position
    int ansp = 0;

    // disallow rule start position
    int drsp = 0;

    ITransientVector result = PersistentVector.create().asTransient();

    
// line 578 "src/java/clojurewerkz/crawlista/robots/Parser.java"
	{
	cs = robots_start;
	}

// line 182 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
    
// line 585 "src/java/clojurewerkz/crawlista/robots/Parser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _robots_key_offsets[cs];
	_trans = _robots_index_offsets[cs];
	_klen = _robots_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _robots_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _robots_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _robots_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _robots_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _robots_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _robots_indicies[_trans];
	cs = _robots_trans_targs[_trans];

	if ( _robots_trans_actions[_trans] != 0 ) {
		_acts = _robots_trans_actions[_trans];
		_nacts = (int) _robots_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _robots_actions[_acts++] )
			{
	case 0:
// line 21 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_start. p = " + p);
    ansp = p;
  }
	break;
	case 1:
// line 26 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_end. p = " + p);
    String lastSeenUserAgentName = new String(data, ansp, (p - ansp));
    // System.out.println("Daw agent: " + lastSeenUserAgentName);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("user-agent", lastSeenUserAgentName.trim()));
  }
	break;
	case 2:
// line 40 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_start. p = " + p);
    drsp = p;
  }
	break;
	case 3:
// line 45 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "disallow none" case (Disallow:)
    if(rule.equals("Disallow:")) {
      rule = "";
    }

    // System.out.println("Daw disallow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("disallow", rule.trim()));
  }
	break;
	case 4:
// line 66 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_start. p = " + p);
    drsp = p;
  }
	break;
	case 5:
// line 71 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "allow none" case (Allow:)
    if(rule.equals("Allow:")) {
      rule = "";
    }

    // System.out.println("Saw allow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("allow", rule.trim()));
  }
	break;
// line 731 "src/java/clojurewerkz/crawlista/robots/Parser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _robots_eof_actions[cs];
	int __nacts = (int) _robots_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _robots_actions[__acts++] ) {
	case 1:
// line 26 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: agent_end. p = " + p);
    String lastSeenUserAgentName = new String(data, ansp, (p - ansp));
    // System.out.println("Daw agent: " + lastSeenUserAgentName);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("user-agent", lastSeenUserAgentName.trim()));
  }
	break;
	case 3:
// line 45 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: disallow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "disallow none" case (Disallow:)
    if(rule.equals("Disallow:")) {
      rule = "";
    }

    // System.out.println("Daw disallow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("disallow", rule.trim()));
  }
	break;
	case 5:
// line 71 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"
	{
    // System.out.println("action: allow_rule_end. p = " + p);

    String rule = new String(data, drsp, (p - drsp));
    // we matched "allow none" case (Allow:)
    if(rule.equals("Allow:")) {
      rule = "";
    }

    // System.out.println("Saw allow_rule: " + rule);

    IPersistentMap m = PersistentHashMap.create();
    result.conj(m.assoc("allow", rule.trim()));
  }
	break;
// line 797 "src/java/clojurewerkz/crawlista/robots/Parser.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 183 "src/rl/clojurewerkz/crawlista/robots/Parser.rl"

    if(cs == robots_error) {
      throw new ParseException("Unparseable input: " + input + ", p = " + p, p);
    }

    return (IPersistentVector)result.persistent();
  }
}
